var Container = Class.create();

Container.prototype = {
  maxHeight: 4096,

  initialize: function(web_prefix, api_prefix, view, has_app) {
    gadgets.rpc.register('resize_iframe', this.setHeight);
    gadgets.rpc.register('set_pref', this.setUserPref);
    gadgets.rpc.register('set_title', this.setTitle);
    gadgets.rpc.register('requestNavigateTo', this.requestNavigateTo);
    gadgets.rpc.register('osapi._handleGadgetRpcMethod', this.handleGadgetRpcMethod);
    gadgets.rpc.register('shindig.requestShareApp', this.requestShareApp);

    this.webPrefix = web_prefix;
    this.apiPrefix = api_prefix;
    this.view = view;
    this.hasApp = has_app;
  },

  setHeight: function(height) {
    if ($(this.f) != undefined) {
      height += 28;
      if (height > gadgets.container.maxHeight) {
        height = gadgets.container.maxHeight;
      }
      Element.setStyle($(this.f), {'height':height+'px'});
    }
  },

  _parseIframeUrl: function(url) {
    var ret = new Object();
    var hashParams = url.replace(/#.*$/, '').split('&');
    var param = key = val = '';
    for (i = 0 ; i < hashParams.length; i++) {
      param = hashParams[i];
      key = param.substr(0, param.indexOf('='));
      val = param.substr(param.indexOf('=') + 1);
      ret[key] = val;
    }
    return ret;
  },

  setUserPref: function(editToken, name, value) {
    if ($(this.f) != undefined) {
      var params = gadgets.container._parseIframeUrl($(this.f).src);
      var url = gadgets.container.apiPrefix + '/prefs/set';
      new Ajax.Request(url, {method: 'get', parameters: { name: name, value: value, st: params.st }});
    }
  },

  setTitle: function(title) {
    var element = $(this.f+'_title');
    if (element != undefined) {
      element.update(title.replace(/&/g, '&amp;').replace(/</g, '&lt;'));
    }
  },

  _getUrlForView: function(view, person, app, mod) {
    if (view === 'home') {
      return gadgets.container.webPrefix;
    } else if (view === 'profile') {
      return gadgets.container.webPrefix + '/member/' + person;
    } else if (view === 'canvas') {
      return gadgets.container.webPrefix + '/application/canvas/' + mod;
    } else {
      return null;
    }
  },

  requestNavigateTo: function(view, opt_params) {
    if ($(this.f) != undefined) {
      var params = gadgets.container._parseIframeUrl($(this.f).src);
      var url = gadgets.container._getUrlForView(view, params.owner, params.aid, params.mid);
      if (opt_params) {
        var paramStr = Object.toJSON(opt_params);
        if (paramStr.length > 0) {
          url += '?appParams=' + encodeURIComponent(paramStr);
        }
      }
      if (url && document.location.href.indexOf(url) == -1) {
        document.location.href = url;
      }
    }
  },

  handleGadgetRpcMethod: function(requests) {
  },

  requestShareApp: function(callbackId, recipientIds, body) {
    var ret = this.f.match(/remote_iframe_(\d+)/);
    var f = this.f;

    if (ret) {
      var mod_id = ret[1];
      if ('canvas' == gadgets.container.view && gadgets.container.hasApp) {
        iframeModalBox.open(gadgets.container.webPrefix+'/application/invite/' + mod_id, function(data) {
          var ids = [];
          var is_success = false;
          if (undefined != data && false !== data && data) {
            var ids = data;
            is_success = true;
          }
          gadgets.rpc.call(f, 'shindig.requestShareApp_callback',
            null,
            callbackId,
            is_success,
            '',
            ids);
        });
      } else {
        gadgets.rpc.call(f, 'shindig.requestShareApp_callback',
          null,
          callbackId,
          false,
          'forbidden',
          []);
      }
    }
  }
}
