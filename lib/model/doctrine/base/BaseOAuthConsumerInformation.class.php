<?php

/**
 * BaseOAuthConsumerInformation
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $name
 * @property string $description
 * @property string $key_string
 * @property string $secret
 * @property integer $file_id
 * @property array $using_apis
 * @property integer $member_id
 * @property Member $Member
 * @property File $Image
 * @property Doctrine_Collection $OAuthAdminToken
 * @property Doctrine_Collection $OAuthMemberToken
 * 
 * @method integer                  getId()               Returns the current record's "id" value
 * @method string                   getName()             Returns the current record's "name" value
 * @method string                   getDescription()      Returns the current record's "description" value
 * @method string                   getKeyString()        Returns the current record's "key_string" value
 * @method string                   getSecret()           Returns the current record's "secret" value
 * @method integer                  getFileId()           Returns the current record's "file_id" value
 * @method array                    getUsingApis()        Returns the current record's "using_apis" value
 * @method integer                  getMemberId()         Returns the current record's "member_id" value
 * @method Member                   getMember()           Returns the current record's "Member" value
 * @method File                     getImage()            Returns the current record's "Image" value
 * @method Doctrine_Collection      getOAuthAdminToken()  Returns the current record's "OAuthAdminToken" collection
 * @method Doctrine_Collection      getOAuthMemberToken() Returns the current record's "OAuthMemberToken" collection
 * @method OAuthConsumerInformation setId()               Sets the current record's "id" value
 * @method OAuthConsumerInformation setName()             Sets the current record's "name" value
 * @method OAuthConsumerInformation setDescription()      Sets the current record's "description" value
 * @method OAuthConsumerInformation setKeyString()        Sets the current record's "key_string" value
 * @method OAuthConsumerInformation setSecret()           Sets the current record's "secret" value
 * @method OAuthConsumerInformation setFileId()           Sets the current record's "file_id" value
 * @method OAuthConsumerInformation setUsingApis()        Sets the current record's "using_apis" value
 * @method OAuthConsumerInformation setMemberId()         Sets the current record's "member_id" value
 * @method OAuthConsumerInformation setMember()           Sets the current record's "Member" value
 * @method OAuthConsumerInformation setImage()            Sets the current record's "Image" value
 * @method OAuthConsumerInformation setOAuthAdminToken()  Sets the current record's "OAuthAdminToken" collection
 * @method OAuthConsumerInformation setOAuthMemberToken() Sets the current record's "OAuthMemberToken" collection
 * 
 * @package    OpenPNE
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseOAuthConsumerInformation extends opDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('oauth_consumer');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'comment' => 'Serial number',
             'length' => '4',
             ));
        $this->hasColumn('name', 'string', 64, array(
             'type' => 'string',
             'default' => '',
             'notnull' => true,
             'comment' => 'Consumer name',
             'length' => '64',
             ));
        $this->hasColumn('description', 'string', null, array(
             'type' => 'string',
             'comment' => 'Consumer description',
             ));
        $this->hasColumn('key_string', 'string', 16, array(
             'type' => 'string',
             'default' => '',
             'notnull' => true,
             'comment' => 'Token for this consumer',
             'length' => '16',
             ));
        $this->hasColumn('secret', 'string', 32, array(
             'type' => 'string',
             'default' => '',
             'notnull' => true,
             'comment' => 'Password for this consumer',
             'length' => '32',
             ));
        $this->hasColumn('file_id', 'integer', 4, array(
             'type' => 'integer',
             'comment' => 'Image file id of this consumer',
             'length' => '4',
             ));
        $this->hasColumn('using_apis', 'array', null, array(
             'type' => 'array',
             'comment' => 'API list that this consumer uses',
             ));
        $this->hasColumn('member_id', 'integer', 4, array(
             'type' => 'integer',
             'notnull' => false,
             'comment' => 'Member id',
             'length' => '4',
             ));


        $this->index('key_secret_UNIQUE', array(
             'fields' => 
             array(
              0 => 'key_string',
              1 => 'secret',
             ),
             'type' => 'unique',
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('comment', 'Saves informations of OAuth Consumer');
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('Member', array(
             'local' => 'member_id',
             'foreign' => 'id',
             'onDelete' => 'cascade'));

        $this->hasOne('File as Image', array(
             'local' => 'file_id',
             'foreign' => 'id',
             'onDelete' => 'set null'));

        $this->hasMany('OAuthAdminToken', array(
             'local' => 'id',
             'foreign' => 'oauth_consumer_id'));

        $this->hasMany('OAuthMemberToken', array(
             'local' => 'id',
             'foreign' => 'oauth_consumer_id'));

        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}