<?php

/**
 * BaseBlacklist
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $uid
 * @property string $memo
 * 
 * @method integer   getId()   Returns the current record's "id" value
 * @method string    getUid()  Returns the current record's "uid" value
 * @method string    getMemo() Returns the current record's "memo" value
 * @method Blacklist setId()   Sets the current record's "id" value
 * @method Blacklist setUid()  Sets the current record's "uid" value
 * @method Blacklist setMemo() Sets the current record's "memo" value
 * 
 * @package    OpenPNE
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 6820 2009-11-30 17:27:49Z jwage $
 */
abstract class BaseBlacklist extends opDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('blacklist');
        $this->hasColumn('id', 'integer', 4, array(
             'type' => 'integer',
             'primary' => true,
             'autoincrement' => true,
             'comment' => 'Serial number',
             'length' => '4',
             ));
        $this->hasColumn('uid', 'string', 32, array(
             'type' => 'string',
             'default' => '',
             'notnull' => true,
             'comment' => 'Mobile identified number',
             'length' => '32',
             ));
        $this->hasColumn('memo', 'string', null, array(
             'type' => 'string',
             'comment' => 'Free memo',
             ));


        $this->index('uid_UNIQUE', array(
             'fields' => 
             array(
              0 => 'uid',
             ),
             'type' => 'unique',
             ));
        $this->option('type', 'INNODB');
        $this->option('collate', 'utf8_unicode_ci');
        $this->option('charset', 'utf8');
        $this->option('comment', 'Saves informations of blacklist');
    }

    public function setUp()
    {
        parent::setUp();
        $timestampable0 = new Doctrine_Template_Timestampable();
        $this->actAs($timestampable0);
    }
}